// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Define the Account model
model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Define the Session model
model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Define the User model
model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  credits       Int       @default(10)

  accounts Account[]
  sessions Session[]
}

// Define the Course model
model Course {
  id    String @id @default(cuid()) @map("_id")
  name  String
  image String
  units Unit[]
}

// Define the Unit model
model Unit {
  id       String @id @default(cuid()) @map("_id")
  courseId String

  name     String
  course   Course    @relation(fields: [courseId], references: [id])
  chapters Chapter[]
}

// Define the Chapter model
model Chapter {
  id     String @id @default(cuid()) @map("_id")
  unitId String

  name               String
  youtubeSearchQuery String
  videoId            String?
  summary            String?
  unit               Unit       @relation(fields: [unitId], references: [id])
  questions          Question[]
}

// Define the Question model
model Question {
  id        String @id @default(cuid()) @map("_id")
  chapterId String

  question String
  answer   String
  options  String
  chapter  Chapter @relation(fields: [chapterId], references: [id])
}

// Define the UserSubscription model
model UserSubscription {
  id                     String    @id @default(cuid()) @map("_id")
  userId                 String    @unique
  stripeCustomerId       String    @unique
  stripeSubscriptionId   String?   
  stripePriceId          String?   
  stripeCurrentPeriodEnd DateTime? 
}
